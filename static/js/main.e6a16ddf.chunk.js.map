{"version":3,"sources":["App.js","GitHub.js","serviceWorker.js","index.js"],"names":["fetcher","path","a","fetch","res","json","App","currencies","useSWR","data","useState","fromValue","setFromValue","toValue","setToValue","fromCurrency","setFromCurrency","toCurrency","setToCurrency","useEffect","fromRate","rates","valueInEur","toRate","convertFromTo","convertToFrom","Container","className","fixed","Paper","variant","elavation","Grid","container","spacing","item","xs","TextField","type","value","onChange","e","parseFloat","target","Select","MenuItem","Object","keys","map","rate","key","GitHub","href","title","width","height","viewBox","style","position","top","border","right","d","fill","transformOrigin","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qVAeMA,EAAO,uCAAG,WAAMC,GAAN,iBAAAC,EAAA,sEACIC,YAHJ,kCAGoBF,GADpB,cACRG,EADQ,gBAEKA,EAAIC,OAFT,cAERA,EAFQ,yBAGPA,GAHO,2CAAH,sDA4GEC,MAtGf,WAAgB,IACAC,EAAeC,YAAO,mBAAoBR,GAAhDS,KADK,EAGqBC,mBAAS,GAH9B,mBAGNC,EAHM,KAGKC,EAHL,OAIiBF,mBAAS,GAJ1B,mBAING,EAJM,KAIGC,EAJH,OAM2BJ,mBAAS,OANpC,mBAMNK,EANM,KAMQC,EANR,OAOuBN,mBAAS,OAPhC,mBAONO,EAPM,KAOMC,EAPN,KAiDb,OARAC,qBAAU,YAhBY,WACpB,IAAMC,EACa,QAAjBL,EAAyB,EAAIR,EAAWc,MAAMN,GAC1CO,EAAaX,EAAYS,EACzBG,EAAwB,QAAfN,EAAuB,EAAIV,EAAWc,MAAMJ,GAC3DH,EAAWQ,EAAaC,GAYxBC,KACC,CAACb,EAAWM,IAEfE,qBAAU,YAZY,WACpB,IAAMI,EAAwB,QAAfN,EAAuB,EAAIV,EAAWc,MAAMJ,GACrDK,EAAaT,EAAUU,EACvBH,EACa,QAAjBL,EAAyB,EAAIR,EAAWc,MAAMN,GAChDH,EAAaU,EAAaF,GAQ1BK,KACC,CAACZ,EAASE,IAERR,EAKH,eAACmB,EAAA,EAAD,CAAWC,UAAU,8BAA8BC,OAAK,EAAxD,UACE,yDACA,cAACC,EAAA,EAAD,CACEF,UAAU,0BACVG,QAAQ,WACRC,UAAW,EAHb,SAKE,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,SACLC,MAAO5B,EACP6B,SAjDkB,SAAAC,GAC5B7B,EAAa8B,WAAWD,EAAEE,OAAOJ,aAmD3B,cAACP,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,SACLC,MAAO1B,EACP2B,SApDgB,SAAAC,GAC1B3B,EAAW4B,WAAWD,EAAEE,OAAOJ,aAsDzB,cAACP,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAACQ,EAAA,EAAD,CAAQL,MAAOxB,EAAcyB,SApEN,SAAAC,GAC/BzB,EAAgByB,EAAEE,OAAOJ,QAmEjB,UACE,cAACM,EAAA,EAAD,CAAUN,MAAO,MAAjB,iBACCO,OAAOC,KAAKxC,EAAWc,OAAO2B,KAAI,SAACC,EAAMC,GAAP,OACjC,cAACL,EAAA,EAAD,CAAoBN,MAAOU,EAA3B,SACGA,GADYC,WAMrB,cAAClB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAACQ,EAAA,EAAD,CAAQL,MAAOtB,EAAYuB,SA1EN,SAAAC,GAC7BvB,EAAcuB,EAAEE,OAAOJ,QAyEf,UACE,cAACM,EAAA,EAAD,CAAUN,MAAO,MAAjB,iBACCO,OAAOC,KAAKxC,EAAWc,OAAO2B,KAAI,SAACC,EAAMC,GAAP,OACjC,cAACL,EAAA,EAAD,CAAoBN,MAAOU,EAA3B,SACGA,GADYC,mBAxCpB,MCtDIC,G,MAdA,WACX,OAAO,mBAAGC,KAAK,oCAAoCzB,UAAU,gBAAgBgB,OAAO,SAASU,MAAM,iBAA5F,SACH,sBAAKC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,cAAcC,MAAO,CAAEC,SAAU,WAAYC,IAAK,EAAGC,OAAQ,EAAGC,MAAO,GAA3G,UACI,sBAAMC,EAAE,sDACR,sBACIA,EAAE,2LACFC,KAAK,QAAQN,MAAO,CAAEO,gBAAiB,eAAiBrC,UAAU,aACtE,sBACImC,EAAE,shBACFC,KAAK,QAAQpC,UAAU,qB,MCAnBsC,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXRC,IAASC,OACL,qCACI,cAAC,EAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,SDuHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e6a16ddf.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport fetch from \"unfetch\";\nimport useSWR from \"swr\";\nimport {\n  Container,\n  Paper,\n  Grid,\n  TextField,\n  Select,\n  MenuItem\n} from \"@material-ui/core\";\n\nconst API_URL = \"https://api.exchangeratesapi.io\";\n\nconst fetcher = async path => {\n  const res = await fetch(API_URL + path);\n  const json = await res.json();\n  return json;\n};\n\nfunction App() {\n  const { data: currencies } = useSWR(\"/latest?base=EUR\", fetcher);\n\n  const [fromValue, setFromValue] = useState(1);\n  const [toValue, setToValue] = useState(1);\n\n  const [fromCurrency, setFromCurrency] = useState(\"EUR\");\n  const [toCurrency, setToCurrency] = useState(\"EUR\");\n\n  const handleFromCurrencyChange = e => {\n    setFromCurrency(e.target.value);\n  };\n\n  const handleToCurrencyChange = e => {\n    setToCurrency(e.target.value);\n  };\n\n  const handleFromValueChange = e => {\n    setFromValue(parseFloat(e.target.value));\n  };\n\n  const handleToValueChange = e => {\n    setToValue(parseFloat(e.target.value));\n  };\n\n  const convertFromTo = () => {\n    const fromRate =\n      fromCurrency === \"EUR\" ? 1 : currencies.rates[fromCurrency];\n    const valueInEur = fromValue / fromRate;\n    const toRate = toCurrency === \"EUR\" ? 1 : currencies.rates[toCurrency];\n    setToValue(valueInEur * toRate);\n  };\n\n  const convertToFrom = () => {\n    const toRate = toCurrency === \"EUR\" ? 1 : currencies.rates[toCurrency];\n    const valueInEur = toValue / toRate;\n    const fromRate =\n      fromCurrency === \"EUR\" ? 1 : currencies.rates[fromCurrency];\n    setFromValue(valueInEur * fromRate);\n  };\n\n  useEffect(() => {\n    convertFromTo();\n  }, [fromValue, toCurrency]);\n\n  useEffect(() => {\n    convertToFrom();\n  }, [toValue, fromCurrency]);\n\n  if (!currencies) {\n    return null;\n  }\n\n  return (\n    <Container className=\"currency-exchange-container\" fixed>\n      <h1>Currency Exchange Rates</h1>\n      <Paper\n        className=\"currency-exchange-paper\"\n        variant=\"outlined\"\n        elavation={1}\n      >\n        <Grid container spacing={3}>\n          <Grid item xs={6}>\n            <TextField\n              type=\"number\"\n              value={fromValue}\n              onChange={handleFromValueChange}\n            />\n          </Grid>\n          <Grid item xs={6}>\n            <TextField\n              type=\"number\"\n              value={toValue}\n              onChange={handleToValueChange}\n            />\n          </Grid>\n          <Grid item xs={6}>\n            <Select value={fromCurrency} onChange={handleFromCurrencyChange}>\n              <MenuItem value={\"EUR\"}>EUR</MenuItem>\n              {Object.keys(currencies.rates).map((rate, key) => (\n                <MenuItem key={key} value={rate}>\n                  {rate}\n                </MenuItem>\n              ))}\n            </Select>\n          </Grid>\n          <Grid item xs={6}>\n            <Select value={toCurrency} onChange={handleToCurrencyChange}>\n              <MenuItem value={\"EUR\"}>EUR</MenuItem>\n              {Object.keys(currencies.rates).map((rate, key) => (\n                <MenuItem key={key} value={rate}>\n                  {rate}\n                </MenuItem>\n              ))}\n            </Select>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Container>\n  );\n      }\n\nexport default App;","import React from 'react';\r\nimport \"./GitHub.css\";\r\n\r\nconst GitHub = () => {\r\n    return <a href=\"https://github.com/Pratik02071998\" className=\"github-corner\" target=\"_blank\" title=\"Open in GitHub\">\r\n        <svg width=\"80\" height=\"80\" viewBox=\"0 0 250 250\" style={{ position: 'absolute', top: 0, border: 0, right: 0 }}>\r\n            <path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\"></path>\r\n            <path\r\n                d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\"\r\n                fill=\"white\" style={{ transformOrigin: '130px 106px' }} className=\"octo-arm\"></path>\r\n            <path\r\n                d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\"\r\n                fill=\"white\" className=\"octo-body\"></path>\r\n        </svg>\r\n    </a>\r\n}\r\n\r\nexport default GitHub;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' }\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport GitHub from './GitHub';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <>\n        <App />\n        <GitHub />\n    </>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}